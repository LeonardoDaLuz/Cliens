{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { createSlice } from '@reduxjs/toolkit';\nimport config from '../config';\nconst initialState = {\n  loginStatus: 'NOT_LOGGED',\n  userLogin: ''\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginStart: (state, action) => {\n      state.loginStatus = 'LOGGING';\n      state.userLogin = '';\n    },\n    LoginSucess: (state, action) => {\n      state.loginStatus = 'LOGGED';\n      state.userLogin = action.payload.login;\n      localStorage.setItem('login', action.payload.login);\n      localStorage.setItem('token', action.payload.token);\n    },\n    incorrectLoginOrPassword: (state, action) => {\n      state.loginStatus = 'INCORRECT_LOGIN_OR_PASSWORD';\n      state.userLogin = '';\n    },\n    loginFailure: (state, action) => {\n      state.loginStatus = 'LOGIN_FAILURE';\n      state.userLogin = '';\n    }\n  }\n});\nexport const {\n  loginStart,\n  LoginSucess,\n  incorrectLoginOrPassword,\n  loginFailure\n} = userSlice.actions;\nexport default userSlice.reducer;\nexport const loginThunk = (login, password) => {\n  return async (dispatch, getState) => {\n    const fetchUrl = config.apiUrl + '/usuarios?email=' + login + '&password=' + password + '';\n    dispatch(loginStart({\n      login,\n      password\n    }));\n    await fetch(fetchUrl).then(body => body.json()).then(data => {\n      if (Array.isArray(data) && data.length === 1) {\n        dispatch(LoginSucess({\n          login,\n          password,\n          token: data.token\n        }));\n      } else {\n        dispatch(incorrectLoginOrPassword({\n          login,\n          password\n        }));\n      }\n    }).catch(error => {\n      dispatch(loginFailure({\n        login,\n        password,\n        error\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/home/leo/Dev/Desafio_frontend_troupe_tecnologia/src/store/user.ts"],"names":["createSlice","config","initialState","loginStatus","userLogin","userSlice","name","reducers","loginStart","state","action","LoginSucess","payload","login","localStorage","setItem","token","incorrectLoginOrPassword","loginFailure","actions","reducer","loginThunk","password","dispatch","getState","fetchUrl","apiUrl","fetch","then","body","json","data","Array","isArray","length","catch","error"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { Action } from \"redux\";\nimport { AppDispatch, AppThunk, RootState } from '.';\nimport config from '../config';\n\nexport interface UserState {\n    loginStatus: 'NOT_LOGGED' | 'LOGGING' | 'LOGGED' | 'LOGIN_FAILURE' | 'INCORRECT_LOGIN_OR_PASSWORD',\n    userLogin: string,\n}\n\nexport interface UserAction {\n    login: string,\n    password: string,\n    error?: any,\n    token?: string,\n    fetchUrl?: string,\n}\n\nconst initialState: UserState = {\n    loginStatus: 'NOT_LOGGED',\n    userLogin: '',\n}\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        loginStart: (state: UserState, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'LOGGING';\n            state.userLogin = '';\n\n        },\n        LoginSucess: (state: UserState, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'LOGGED';\n            state.userLogin = action.payload.login;\n            localStorage.setItem('login', action.payload.login);\n            localStorage.setItem('token', action.payload.token);\n        },\n        incorrectLoginOrPassword: (state, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'INCORRECT_LOGIN_OR_PASSWORD';\n            state.userLogin = '';\n        },\n        loginFailure: (state, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'LOGIN_FAILURE';\n            state.userLogin = '';\n        }\n    }\n})\n\nexport const { loginStart, LoginSucess, incorrectLoginOrPassword, loginFailure } = userSlice.actions\n\nexport default userSlice.reducer;\n\nexport const loginThunk = (login: string, password: string): AppThunk => {\n  \n    return async (dispatch: AppDispatch, getState: () => RootState) => {\n\n        const fetchUrl = config.apiUrl + '/usuarios?email=' + login + '&password=' + password + '';\n\n        dispatch(loginStart({ login, password }));\n\n        interface LoginResponseType {\n            email: string,\n            token?: string,\n        }\n\n        await fetch(fetchUrl)\n            .then(body => body.json())\n            .then((data: LoginResponseType) => {\n\n                if (Array.isArray(data) && data.length === 1) {\n                    dispatch(LoginSucess({ login, password, token: data.token }));\n\n                } else {\n                    dispatch(incorrectLoginOrPassword({ login, password }));\n                }\n            })\n            .catch(error => {\n                dispatch(loginFailure({ login, password, error }));\n            })\n\n    }\n}"]},"metadata":{},"sourceType":"module"}