{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { createSlice } from '@reduxjs/toolkit';\nimport config from '../config';\nconst initialState = {\n  loginStatus: 'NOT_LOGGED',\n  userLogin: '',\n  token: ''\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginStart: (state, action) => {\n      state.loginStatus = 'LOGGING';\n      state.userLogin = '';\n    },\n    LoginSucess: (state, action) => {\n      state.loginStatus = 'LOGGED';\n      state.userLogin = action.payload.login;\n      state.token = action.payload.token;\n      localStorage.setItem('login', action.payload.login);\n      localStorage.setItem('token', action.payload.token);\n    },\n    incorrectLoginOrPassword: (state, action) => {\n      state.loginStatus = 'INCORRECT_LOGIN_OR_PASSWORD';\n      state.userLogin = '';\n    },\n    loginFailure: (state, action) => {\n      state.loginStatus = 'LOGIN_FAILURE';\n      state.userLogin = '';\n    }\n  }\n});\nexport const {\n  loginStart,\n  LoginSucess,\n  incorrectLoginOrPassword,\n  loginFailure\n} = userSlice.actions;\nexport default userSlice.reducer;\nexport const loginThunk = (login, password) => {\n  return async (dispatch, getState) => {\n    const fetchUrl = config.apiUrl + '/login';\n    dispatch(loginStart({\n      login,\n      password,\n      url: fetchUrl\n    }));\n    const formData = new FormData();\n    formData.append('login', 'leo@gmail.com');\n    formData.append('password', '123456');\n    await fetch(fetchUrl, {\n      method: 'post',\n      body: 'login=leo@gmail.com&password=123456',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(body => body.json()).then(data => {\n      if ('auth' in data && data.auth === true) {\n        dispatch(LoginSucess({\n          login,\n          password,\n          token: data.token\n        }));\n      } else {\n        dispatch(incorrectLoginOrPassword({\n          login,\n          password\n        }));\n      }\n    }).catch(error => {\n      dispatch(loginFailure({\n        login,\n        password,\n        error\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/home/leo/Dev/Desafio_frontend_troupe_tecnologia/src/store/user.ts"],"names":["createSlice","config","initialState","loginStatus","userLogin","token","userSlice","name","reducers","loginStart","state","action","LoginSucess","payload","login","localStorage","setItem","incorrectLoginOrPassword","loginFailure","actions","reducer","loginThunk","password","dispatch","getState","fetchUrl","apiUrl","url","formData","FormData","append","fetch","method","body","headers","then","json","data","auth","catch","error"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { Action } from \"redux\";\nimport { AppDispatch, AppThunk, RootState } from '.';\nimport config from '../config';\n\nexport interface UserState {\n    loginStatus: 'NOT_LOGGED' | 'LOGGING' | 'LOGGED' | 'LOGIN_FAILURE' | 'INCORRECT_LOGIN_OR_PASSWORD',\n    userLogin: string,\n    token: string\n}\n\nexport interface UserAction {\n    login: string,\n    password: string,\n    error?: any,\n    token?: string,\n    url?: string,\n}\n\nconst initialState: UserState = {\n    loginStatus: 'NOT_LOGGED',\n    userLogin: '',\n    token: ''\n}\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        loginStart: (state: UserState, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'LOGGING';\n            state.userLogin = '';\n\n        },\n        LoginSucess: (state: UserState, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'LOGGED';\n            state.userLogin = action.payload.login;\n            state.token = action.payload.token;\n            localStorage.setItem('login', action.payload.login);\n            localStorage.setItem('token', action.payload.token);\n        },\n        incorrectLoginOrPassword: (state, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'INCORRECT_LOGIN_OR_PASSWORD';\n            state.userLogin = '';\n        },\n        loginFailure: (state, action: PayloadAction<UserAction>) => {\n            state.loginStatus = 'LOGIN_FAILURE';\n            state.userLogin = '';\n        }\n    }\n})\n\nexport const { loginStart, LoginSucess, incorrectLoginOrPassword, loginFailure } = userSlice.actions\n\nexport default userSlice.reducer;\n\nexport const loginThunk = (login: string, password: string): AppThunk => {\n  \n    return async (dispatch: AppDispatch, getState: () => RootState) => {\n\n\n\n        const fetchUrl = config.apiUrl+'/login';\n\n        dispatch(loginStart({ login, password, url: fetchUrl }));\n\n        interface LoginResponseType {\n            auth: boolean,            \n            token?: string,\n        }\n\n        const formData = new FormData();\n\n        formData.append('login', 'leo@gmail.com');\n        formData.append('password', '123456');\n\n        await fetch(fetchUrl, {  method: 'post', body: 'login=leo@gmail.com&password=123456', headers: { 'Content-Type': 'application/x-www-form-urlencoded'}})\n            .then(body => body.json())\n            .then((data: LoginResponseType) => {\n\n\n                if ('auth' in data && data.auth === true) {\n                    dispatch(LoginSucess({ login, password, token: data.token }));\n\n                } else {\n                    dispatch(incorrectLoginOrPassword({ login, password }));\n                }\n            })\n            .catch(error => {\n                dispatch(loginFailure({ login, password, error }));\n            })\n\n    }\n}"]},"metadata":{},"sourceType":"module"}