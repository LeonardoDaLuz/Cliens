{"ast":null,"code":"var _jsxFileName = \"/home/leo/Dev/Desafio_frontend_troupe_tecnologia/front/src/components/EditarCliente/Input/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport { useAppSelector } from \"../../../store/hooks\";\nimport { InputBackground, InputIcon, ErrorLabel, InputStyles } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Input({\n  type,\n  name,\n  label,\n  icon,\n  formik,\n  placeholder,\n  format,\n  onChange,\n  disabled\n}) {\n  _s();\n\n  const customerState = useAppSelector(store => store.customer);\n  const customer = customerState.customer;\n  const elRef = useRef(null);\n\n  function handleFormatMasking(e) {\n    if (format === 'cpf') e.target.value = formatCPF(e.target.value);\n    if (format === 'cep') e.target.value = formatCEP(e.target.value);\n    formik.handleChange(e);\n    if (onChange) onChange(e);\n  }\n\n  useEffect(() => {\n    handleFormatMasking({\n      target: elRef.current\n    });\n  }, [customer]);\n  return /*#__PURE__*/_jsxDEV(InputStyles, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), formik.errors[name] ? /*#__PURE__*/_jsxDEV(ErrorLabel, {\n      children: [\"(\", formik.errors[name], \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 36\n    }, this) : null, /*#__PURE__*/_jsxDEV(InputBackground, {\n      disabled: disabled,\n      children: [/*#__PURE__*/_jsxDEV(InputIcon, {\n        icon: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: elRef,\n        type: type,\n        name: name,\n        id: name,\n        onChange: handleFormatMasking,\n        value: formik.values[name],\n        placeholder: placeholder,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Input, \"jkm+SwXI2Yf3uKGpS6Z4/B0HNcI=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = Input;\nexport function formatCPF(cpf) {\n  cpf = cpf.replace(/[^\\d]/g, \"\"); //remove caracteres especiais e letras\n\n  if (cpf.length < 7 && cpf.length > 3) {\n    return cpf.replace(/(\\d{3})/, \"$1.\");\n  }\n\n  if (cpf.length < 10 && cpf.length > 6) {\n    return cpf.replace(/(\\d{3})(\\d{3})/, \"$1.$2.\");\n  }\n\n  if (cpf.length > 9) {\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})/, \"$1.$2.$3-\");\n  }\n\n  return cpf;\n}\nexport function formatCEP(cpf) {\n  if (cpf === \"undefined\" || typeof cpf === 'undefined') return \"\"; //retira os caracteres indesejados...\n\n  cpf = cpf.replace(/[^\\d]/g, \"\").substring(0, 8); //realizar a formatação...\n\n  return cpf.replace(/(\\d{5})(\\d{3})/, \"$1-$2\");\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/leo/Dev/Desafio_frontend_troupe_tecnologia/front/src/components/EditarCliente/Input/index.tsx"],"names":["React","useEffect","useRef","useAppSelector","InputBackground","InputIcon","ErrorLabel","InputStyles","Input","type","name","label","icon","formik","placeholder","format","onChange","disabled","customerState","store","customer","elRef","handleFormatMasking","e","target","value","formatCPF","formatCEP","handleChange","current","errors","values","cpf","replace","length","substring"],"mappings":"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","sourcesContent":["import { Formik } from \"formik\";\nimport React, { useEffect, useRef } from \"react\";\nimport { RootState } from \"../../../store\";\nimport { useAppSelector } from \"../../../store/hooks\";\nimport { InputBackground, InputIcon, ErrorLabel, InputStyles } from \"./style\";\n\ninterface props {\n    type: string,\n    name: string,\n    label: string,\n    icon: string,\n    placeholder?: string,\n    formik: any,\n    format?: 'none' | 'cpf' | 'email' | 'cep',\n    onChange?: (e: any) => void,\n    disabled?: boolean\n}\n\nexport default function Input({ type, name, label, icon, formik, placeholder, format, onChange, disabled }: props) {\n\n\n    const customerState = useAppSelector((store: RootState) => store.customer);\n\n    const customer = customerState.customer;\n\n    const elRef = useRef(null);\n\n    function handleFormatMasking(e: { target: HTMLInputElement }) {\n\n    \n        if (format === 'cpf')\n            e.target.value = formatCPF(e.target.value);\n    \n    \n        if (format === 'cep')\n            e.target.value = formatCEP(e.target.value);\n    \n        formik.handleChange(e);\n    \n        if (onChange)\n            onChange(e);\n    }\n\n    useEffect(() => {\n\n        \n        handleFormatMasking({ target: elRef.current });\n        \n    }, [customer])\n    \n    return (\n        <InputStyles>\n            <label htmlFor={name}>{label}</label>\n            {formik.errors[name] ? <ErrorLabel>({formik.errors[name]})</ErrorLabel> : null}\n            <InputBackground disabled={disabled}>\n                <InputIcon icon={icon}></InputIcon>\n                <input                    \n                    ref={elRef}\n                    type={type}\n                    name={name} \n                    id={name}\n                    onChange={handleFormatMasking}\n                    value={formik.values[name]}\n                    placeholder={placeholder}\n                    disabled={disabled}\n                />\n            </InputBackground>\n        </InputStyles>\n\n    )\n}\n\n\nexport function formatCPF(cpf: string | undefined) {\n\n    cpf = cpf.replace(/[^\\d]/g, \"\"); //remove caracteres especiais e letras\n\n    if (cpf.length < 7 && cpf.length > 3) {\n        return cpf.replace(/(\\d{3})/, \"$1.\");\n    }\n    if (cpf.length < 10 && cpf.length > 6) {\n        return cpf.replace(/(\\d{3})(\\d{3})/, \"$1.$2.\");\n    }\n    if (cpf.length > 9) {\n       \n        return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})/, \"$1.$2.$3-\");\n    }\n\n    return cpf;\n}\n\nexport function formatCEP(cpf: string | undefined) {\n\n\n\n    if (cpf === \"undefined\" || typeof cpf === 'undefined')\n        return \"\";\n    //retira os caracteres indesejados...\n    cpf = cpf.replace(/[^\\d]/g, \"\").substring(0, 8);\n\n    //realizar a formatação...\n    return cpf.replace(/(\\d{5})(\\d{3})/, \"$1-$2\");\n}\n\n"]},"metadata":{},"sourceType":"module"}